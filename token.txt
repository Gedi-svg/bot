const polygonBaseTokens: Tokens = {
  wbnb: { symbol: 'WMATIC', address: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270' },
  usdt: { symbol: 'USDT', address: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F' },
  USDC: { symbol: 'USDC', address: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174' },
};

const polygonQuoteTokens: Tokens = {
  ETH: { symbol: 'ETH', address: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619' },
  DAI: { symbol: 'DAI', address: '0x6b175474e89094c44da98b954eedeac495271d0f' },
  AAVE: { symbol: 'AAVE', address: '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9' },
  UNI: { symbol: 'UNI', address: '0xb33eaad8d922b1083446dc23f610c2567fb5180f' },
  SUSHI: { symbol: 'SUSHI', address: '0x0b3f868e0be5597d5db7feb59e1cadbb0fdda50a' },
  QUICK: { symbol: 'QUICK', address: '0x831753dd7087cac61ab5644b308642cc1c33dc13' },
  TUSD: { symbol: 'TUSD', address: '0x2e1AD108fF1D8C782fcBbB89AAd783aC49586756' },
  ATOM: { symbol: 'ATOM', address: '0xac51C4c48Dc3116487eD4BC16542e27B5694Da1b' },
  BAL: { symbol: 'BAL', address: '0x9a71012b13ca4d3d0cdc72a177df3ef03b0e76a3' },
  EMON: { symbol: 'EMON', address: '0xd6a5ab46ead26f49b03bbb1f9eb1ad5c1767974a' },
  COMBO: { symbol: 'COMBO', address: '0x6ddb31002abc64e1479fc439692f7ea061e78165' },
  BUSD: { symbol: 'BUSD', address: '0xdab529f40e671a1d4bf91361c21bf9f0c9712ab7' },
   mm: { symbol: 'MM', address: '0xf6a09deadf5a10aa7822d95e3228b2315de8f6fa' },
  revv: { symbol: 'REVV', address: '0x70c006878a5a50ed185ac4c87d837633923de296' },
  ice: { symbol: 'ICE', address: '0xc6C855AD634dCDAd23e64DA71Ba85b8C51E5aD7c' },
  game: { symbol: 'GAME', address: '0x8d1566569d5b695d44a9a234540f68D393cDC40D' },
  chp: { symbol: 'CHP', address: '0x59B5654a17Ac44F3068b3882F298881433bB07Ef' },
  dmr: { symbol: 'DMR', address: '0x955ce23f20217a6aa205620b40ede4c9e83d325f' },
  yup: { symbol: 'YUP', address: '0x086373fad3447F7F86252fb59d56107e9E0FaaFa' },
  paint: { symbol: 'PAINT', address: '0x7c28F627eA3aEc8B882b51eb1935f66e5b875714' },
  swash: { symbol: 'SWASH', address: '0xbA3CB8329D442E6F9Eb70fafe1E214251df3D275' },
  pruf: { symbol: 'PRUF', address: '0xAdf72D32E511eE00c6E0FF5D62Cd5C7C40A6aDEA' },
  web3: { symbol: 'WEB3', address: '0xBcD2C5C78000504EFBC1cE6489dfcaC71835406A' },
  udt: { symbol: 'UDT', address: '0xf7e78d9c4c74df889a83c8c8d6d05bf70ff75876' },
  uctc: { symbol: 'UCTC', address: '0xD4b42287F1EE04aF246aD792153C39D62733f826' },
  uct: { symbol: 'UCT', address: '0xfd5962484BE2c3574D70131BF5D452CcC7C69F67' },
  iq: { symbol: 'IQ', address: '0xB9638272aD6998708de56BBC0A290a1dE534a578' },
  trade: { symbol: 'TRADE', address: '0x692AC1e363ae34b6B489148152b12e2785a3d8d6' },
};
const polygonDexes: AmmFactories = {
  quickswap: '0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32',
  PolyDEX: '0xC60aE14F2568b102F8Ca6266e8799112846DD088',
  polycat: '0x477Ce834Ae6b7aB003cCe4BC4d8697763FF456FA',
  sushiswap: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',
  apeswap: '0xCf083Be4164828f00cAE704EC15a36D711491284',
  polymm: '0x7cFB780010e9C861e03bCbC7AC12E013137D47A5',
  DFYN: '0xE7Fb3e833eFE5F9c441105EB65Ef8b261266423B',
  JETSWAP: '0x668ad0ed2622C62E24f0d5ab6B6Ac1b9D2cD4AC7',
};
const wethFactory = (await ethers.getContractAt('IWMATIC', WMATIC)) as IWMATIC;
    wmatic = wethFactory.attach(WMATIC) as IWMATIC;

    const fbFactory = await ethers.getContractFactory('FlashBot');
    flashBot = (await fbFactory.deploy(WMATIC)) as FlashBot;


    zk pass: eR5Uus@6kvmpFjk

    ---------------------------------------------------------------------------

    async function updateCombinations(network: Network): Promise<TokenCombination[]> {
  // Fetch base and quote tokens for the network
  const [baseTokens, quoteTokens] = getTokens(network);

  let combinations: TokenCombination[] = [];

  // Generate combinations of three tokens
  for (const baseKey in baseTokens) {
    const baseToken = baseTokens[baseKey];
    for (const quote1Key in quoteTokens) {
      const quoteToken1 = quoteTokens[quote1Key];
      for (const quote2Key in quoteTokens) {
        if (quote1Key === quote2Key) continue; // Ensure different tokens
        const quoteToken2 = quoteTokens[quote2Key];
        
        // Construct combination
        const combination: TokenCombination = {
          symbols: `${baseToken.symbol}-${quoteToken1.symbol}-${quoteToken2.symbol}`,
          addresses: [baseToken.address, quoteToken1.address, quoteToken2.address],
          pairs: []
        };
        combinations.push(combination);
      }
    }
  }
  let factories: Contract[] = [];
  const factoryAddrs = getFactories(network);
  for (const key in factoryAddrs) {
    const addr = factoryAddrs[key]; // Assume a single factory in this case
    const factory = new ethers.Contract(addr, ['function getPool(address tokenA, address tokenB, uint24 fee) view returns (address pool)'], ethers.provider);
    factories.push(factory);
  }
  const feeTiers = [500, 3000, 10000]; // Define the fee tiers you are interested in
  
  for (const combination of combinations) {
    // Try to fetch the pool for each fee tier and add it to the pairs array if it exists
    const [pool0, pool1, pool2] = await Promise.all(
      feeTiers.map(fee => Promise.all([
        factories[0].getPool(combination.addresses[0], combination.addresses[1], fee),
        factories[1].getPool(combination.addresses[1], combination.addresses[2], fee),
        factories[2].getPool(combination.addresses[2], combination.addresses[0], fee)
      ]))
    );

    // Add valid pools to the combination
    combination.pairs.push(
      pool0.find(pool => pool !== ethers.constants.AddressZero),
      pool1.find(pool => pool !== ethers.constants.AddressZero),
      pool2.find(pool => pool !== ethers.constants.AddressZero)
    );
  }

  return combinations;
}
----------------------------------------------------------------------
if (profit >= gasFee) {
            profit -= gasFee;
        } else {
            profit = 0; // Ensure profit cannot be negative
        }
        -------------------------------------------------------------------------------------------

        import { ethers } from 'hardhat';
import { FlashArbitrageV3 } from '../typechain/FlashArbitrageV3';
import { Vault } from '../typechain/Vault';
import { expect } from 'chai';
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers';
import { IUniswapV3Factory } from '../typechain/IUniswapV3Factory';
import { Mock } from '../typechain/Mock';
describe('Flash Arbitrage', function () {
  let flashContract: FlashArbitrageV3;
  let vaultContract: Vault;
  let signer: SignerWithAddress;
  let uniswapFactory: IUniswapV3Factory;
  let mockFactory: MockUniswapV3Factory;
  let mockPoolAB: MockUniswapV3Pool;
  let mockPoolBC: MockUniswapV3Pool;
  let mockPoolCA: MockUniswapV3Pool;
  const posman = '0xC36442b4a4522E871399CD717aBDD847Ab11FE88';
  const WMATIC = '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270';
  const uniRout = '0x1F98431c8aD98523631AE4a59f267346ea31F984';
  const USDT = '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270'; //wmatic
  const ETH = '0xb33eaad8d922b1083446dc23f610c2567fb5180f'; //uni
  const UNI = '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619'; //quic

  before(async function () {
        [signer] = await ethers.getSigners();
        const MockFactory = await ethers.getContractFactory('MockUniswapV3Factory');
        const MockPool = await ethers.getContractFactory('MockUniswapV3Pool');

        mockFactory = await MockFactory.deploy();
        mockPoolAB = await MockPool.deploy(1234567890, 100, 1000);
        mockPoolBC = await MockPool.deploy(1234567890, 100, 1000);
        mockPoolCA = await MockPool.deploy(1234567890, 100, 1000);

        await mockFactory.setPool(USDT, ETH, 500, mockPoolAB.address);
        await mockFactory.setPool(ETH, UNI, 500, mockPoolBC.address);
        await mockFactory.setPool(UNI, USDT, 500, mockPoolCA.address);
        const FlashContract = await ethers.getContractFactory('FlashArbitrageV3');
        const VaultContract = await ethers.getContractFactory('Vault');
        vaultContract = (await VaultContract.deploy(USDT, ETH, UNI)) as Vault;
        flashContract = (await FlashContract.deploy(WMATIC, uniRout, posman)) as FlashArbitrageV3;
        console.log("Contract deployed to address:", flashContract.address);
        console.log("Contract deployed to address:", vaultContract.address);
        uniswapFactory = await ethers.getContractAt('IUniswapV3Factory', uniRout); 
  });

  it('should add and remove base tokens correctly', async function () {
    const newToken = '0x0000000000000000000000000000000000000001';
    await flashContract.addBaseToken(newToken);
    let baseTokens = await flashContract.getBaseTokens();
    expect(baseTokens).to.include(newToken);

    await flashContract.removeBaseToken(newToken);
    baseTokens = await flashContract.getBaseTokens();
    expect(baseTokens).to.not.include(newToken);
  });

  it('should revert if trying to perform flash arbitrage with invalid token paths', async function () {
    const invalidTokenA = USDT;
    const invalidTokenB = ETH;
    const invalidTokenC = UNI;
    const gasFee = 100;
    const amountIn = 1000;

    await expect(
      flashContract.executeFlashArbitrage(invalidTokenA, invalidTokenB, invalidTokenC, amountIn, 0, gasFee, vaultContract.address)
    ).to.be.reverted;
  });

  it('should revert if trying to perform flash arbitrage with insufficient input amount', async function () {
    const tokenA = USDT;
    const tokenB = ETH;
    const tokenC = UNI;
    const gasFee = 100;
    const insufficientAmountIn = 10;

    await expect(
      flashContract.executeFlashArbitrage(tokenA, tokenB, tokenC, insufficientAmountIn, 0, gasFee, vaultContract.address)
    ).to.be.reverted;
  });

  it('should calculate profit correctly', async function () {
    const baseTokens = await flashContract.getBaseTokens();
    console.log('Base Tokens:', baseTokens);

    for (const tokenA of baseTokens) {
      for (const tokenB of baseTokens) {
        if (tokenA === tokenB) continue;

        const gasFee = 1;
        const profit = await flashContract.getProfit(tokenA, tokenB, gasFee, vaultContract.address);
        console.log(`Profit for pair ${tokenA}, ${tokenB}: ${profit}`);
        
        expect(profit).to.be.gte(0);
      }
    }
  });

  it('should execute flash arbitrage correctly', async function () {
    const tokenA = USDT;
    const tokenB = ETH;
    const tokenC = UNI;
    const gasFee = 1;

    const pairAddressAB = await uniswapFactory.getPool(tokenA, tokenB, 500);
    const pairAddressBC = await uniswapFactory.getPool(tokenB, tokenC, 500);
    const pairAddressCA = await uniswapFactory.getPool(tokenC, tokenA, 500);

    console.log('Pair Address AB:', pairAddressAB);
    console.log('Pair Address BC:', pairAddressBC);
    console.log('Pair Address CA:', pairAddressCA);

    if (!pairAddressAB || !pairAddressBC || !pairAddressCA) {
      console.error("One or more pair addresses are invalid. Exiting test.");
      return;
    }
    // Get the reserves of the token pairs
    const reservesAB = await flashContract.getOrderedReserves(tokenA, tokenB, vaultContract.address);
    const reservesBC = await flashContract.getOrderedReserves(tokenB, tokenC, vaultContract.address);
    const reservesCA = await flashContract.getOrderedReserves(tokenC, tokenA, vaultContract.address);
    
    console.log("Reserves AB:", reservesAB);
    console.log("Reserves BC:", reservesBC);
    console.log("Reserves CA:", reservesCA);

    // Check if reserves are valid
    if (!reservesAB || !reservesBC || !reservesCA) {
      console.error("One or more reserve values are invalid. Exiting test.");
      return;
    }

    const amountIn = 10; // Set a reasonable amount for testing

    await flashContract.executeFlashArbitrage(tokenA, tokenB, tokenC, amountIn, 0, gasFee, vaultContract.address);
    expect(await flashContract.getTokenBalance(tokenA)).to.equal(0);
    expect(await flashContract.getTokenBalance(tokenB)).to.equal(0);
    expect(await flashContract.getTokenBalance(tokenC)).to.equal(0);
  });
});
